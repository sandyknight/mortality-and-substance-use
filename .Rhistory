library(rvest)
url <- "https://www.glassdoor.co.uk/Reviews/NESTA-Reviews-E37043.htm"
read_html(url)
html <- read_html(url)
html |> html_elements()
html |> html_attrs()
html |> html_text()
html |> html_elements("div")
html |> html_elements("div") |> html_attr("class")
html |> html_elements("div") |> html_attr("class") == "content"
divs <- html |> html_elements("div")
divs |> html_attr("class") == "content"
divs[divs |> html_attr("class") == "content"]
divs[divs |> html_attr("class") == "content",]
divs[(divs |> html_attr("class") == "content")]
library(tinytex)
tinytex::install_tinytex()
tinytex::is_tinytex()
reticulate::repl_python()
library(rvest)
url <- "https://www.tesco.com/groceries/en-GB/shop/drinks/spirits/all"
html <- read_html(url)
?read_html()
sesh <- session(url)
install.packages("Rcrawler")
library(Rcrawler)
?Rcrawler()
c <- ContentScraper(url)
c
pi
exp(1)
f <- function(x){
fx <-   (1 / sqrt((2*pi))) * (exp(1)^(-x^2/2))
return(fx)
}
f(1)
seq(0,1, 0.01)
f(seq(0,1, 0.01))
plot(f(seq(0,1, 0.01)))
density((f(seq(0,1, 0.01))))
plot(density((f(seq(0,1, 0.01)))))
f <- function(x){
fx <-   (1 / sqrt((2*pi))) * (exp(1)^((-x^2)/2))
return(fx)
}
plot(density((f(seq(0,1, 0.01)))))
f(seq(0,1, 0.01))
plot(f(seq(0,1, 0.01)))
rnorm(n = 100, mean = 0, sd = 1)
plot(rnorm(n = 100, mean = 0, sd = 1))
plot(f(seq(0,1, 0.01)))
density(f(seq(0,1, 0.01)))
plot(density(f(seq(0,1, 0.01))))
plot(density(rnorm(n = 100, mean = 0, sd = 1)))
plot(density(rnorm(n = 1000, mean = 0, sd = 1)))
plot(density(rnorm(n = 10000, mean = 0, sd = 1)))
plot(density(rnorm(n = 100000, mean = 0, sd = 1)))
plot(density(rnorm(n = 1000000, mean = 0, sd = 1)))
plot(density(f(seq(0,1, 0.00001))))
plot(density(rnorm(n = 1000000, mean = 0, sd = 1)))
plot(f(seq(0,1, 0.00001)))
plot(f(seq(0,1, 0.00001)))
plot(f(seq(0,1000,1)))
plot(f(seq(1,1000,1)))
density(f(seq(1,1000,1)))
plot(density(f(seq(1,1000,1))))
plot(density(f(seq(1,100000,1))))
plot(density(f(seq(1,100,1))))
rnorm(n = 1000000, mean = 0, sd = 1))
rnorm(n = 1000000, mean = 0, sd = 1)
rnorm(n = 1, mean = 0, sd = 1)
f(1)
f(-1)
reticulate::repl_python()
reticulate::repl_python()
install.packages(c("BH", "BiasedUrn", "blob", "bnlearn", "bpbounds", "broom", "BuyseTest", "Cairo", "car", "CausalGPS", "causaloptim", "CausalQueries", "causalweight", "checkmate", "chron", "cjoint", "class", "classInt", "cli", "clue", "clusterGeneration", "cna", "cobalt", "coin", "collapse", "colorspace", "colourpicker", "compositions", "config", "ctv", "cubature", "curl", "data.table", "data.tree", "datawizard", "dbarts", "dbplyr", "deldir", "DEoptimR", "designmatch", "dfoptim", "DiagrammeR", "distributional", "doRNG", "DoubleML", "dplyr", "DRDID", "dreamerr", "drtmle", "DT", "dtplyr", "DynTxRegime", "e1071", "earth", "ECOSolveR", "eefAnalytics", "EffectLiteR", "effectsize", "EnvStats", "evalITR", "expm", "fastDummies", "fixest", "flextable", "FNN", "forcats", "forecast", "Formula", "future", "future.apply", "gam", "gargle", "gdata", "gdtools", "generalCorr", "GenSA", "geometry", "gfoRmula", "ggdag", "ggfittext", "ggplot2", "ggplotify", "ggrepel", "ggsci", "glmnet", "glmx", "gmp", "gnm", "googledrive", "googlesheets4", "graphlayouts", "grf", "gridpattern", "gt", "gtable", "haven", "hettx", "Hmisc", "hms", "htmlTable", "httr2", "idem", "igraph", "influenceR", "insight", "interp", "inum", "isoband", "ivdesc", "ivmodel", "ivreg", "janitor", "keras", "kernlab", "KFAS", "ks", "labeling", "labelled", "lava", "lavaan", "lawstat", "lfe", "lhs", "libcoin", "limSolve", "lme4", "locfit", "loo", "LowRankQP", "lpSolve", "ltmle", "lubridate", "magick", "marginaleffects", "markdown", "match2C", "Matching", "MatchIt", "matchMulti", "MatchThem", "Matrix", "MatrixModels", "matrixStats", "mboost", "mclust", "meboot", "medflex", "MendelianRandomization", "metafor", "metR", "mets", "mice", "microbenchmark", "microsynth", "minqa", "miscTools", "mlbench", "mlr3", "mlr3learners", "mlr3misc", "mlr3tuning", "modelbased", "modelr", "multcomp", "mvnfast", "mvtnorm", "ncvreg", "network", "nleqslv", "nnls", "nomnoml", "np", "odbc", "officer", "optimx", "optmatch", "osqp", "packrat", "paradox", "parallelly", "parameters", "partykit", "pbapply", "pbkrtest", "pcalg", "pdftools", "performance", "plm", "plotly", "plotrix", "plyr", "polspline", "polyclip", "posterior", "pracma", "pROC", "processx", "prodlim", "progressr", "pryr", "ps", "psych", "Publish", "qpdf", "qtl", "Qtools", "quantmod", "quantreg", "qvcalc", "ranger", "rbibutils", "rcdd", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppTOML", "rdflib", "Rdpack", "rdrobust", "reactR", "readODS", "readr", "readstata13", "readxl", "redland", "rematch", "repr", "reticulate", "Rglpk", "riskRegression", "rjags", "rlemon", "Rmpfr", "rms", "robustbase", "rootSolve", "rpart", "rpsftm", "rrcov", "rsample", "rsconnect", "RSQLite", "rstan", "rstanarm", "rstantools", "rsvg", "s2", "scpi", "scs", "sf", "sfsmisc", "shinyWidgets", "showtext", "slider", "sna", "snakecase", "sp", "spatstat.data", "spatstat.geom", "spatstat.utils", "speedglm", "StanHeaders", "statmod", "statnet.common", "stringi", "stringr", "SuperLearner", "survey", "svglite", "Synth", "systemfit", "tableHTML", "tensorflow", "tesseract", "texreg", "TH.data", "tidygraph", "tidysynth", "tidyverse", "timechange", "timeDate", "timereg", "tmle", "treemap", "treemapify", "tseries", "tzdb", "ufs", "units", "uuid", "V8", "varhandle", "vcd", "VGAM", "viridis", "viridisLite", "vroom", "warp", "wCorr", "webshot", "WeightIt", "WGCNA", "wk", "writexl", "xgboost", "XML", "xts", "yulab.utils", "zoo"))
library(tidyverse)
library(updateR)
library(ical)
cal <- ical::ical_parse(file = "../Knight Sandy Calendar.ics")
cal_df <- ical::ical_parse_df(cal)
cal_df <- ical::ical_parse_df(file = "../Knight Sandy Calendar.ics")
cal_df
library(tidyverse)
as_tibble(cal_df)
df <- as_tibble(cal_df)
pull(df, summary) |> unique()
df |>
filter(str_detect(summary, "SK|Sandy"))
df |>
filter(str_detect(summary, "SK|Sandy")) |>
filter(str_detect("AL|A/L|Annual leave|annual leave|Annual Leave"))
df |>
filter(str_detect(summary, "SK|Sandy")) |>
filter(str_detect(summary, "AL|A/L|Annual leave|annual leave|Annual Leave"))
al <-
df |>
filter(str_detect(summary, "SK|Sandy")) |>
filter(str_detect(summary, "AL|A/L|Annual leave|annual leave|Annual Leave"))
al |>
select(summary, start, end)
rm(cal);rm(cal_df);rm(df)
al |>
select(summary, start, end)
al |>
select(summary, start, end) |>
filter(!str_detect(summary, "priv"))
al <-
al |>
select(summary, start, end) |>
filter(!str_detect(summary, "priv"))
al
mean(36, 60, 44, 16. 24)
mean(36, 60, 44, 16, 24)
library(fingertipsR)
inds <- fingertipsR::indicators_unique()
library(tidyverse)
inds |>
filter(IndicatorName %in% "Alcohol-related mortality", "Alcohol-specific mortality")
inds |>
filter(IndicatorName %in% c("Alcohol-related mortality", "Alcohol-specific mortality"))
inds <-
inds |>
filter(IndicatorName %in% c("Alcohol-related mortality", "Alcohol-specific mortality"))
inds[, "IndicatorName"] == "Alcohol-related mortality"
inds[inds[, "IndicatorName"] == "Alcohol-related mortality"]
inds[inds[, "IndicatorName"] == "Alcohol-related mortality",]
inds[inds[, "IndicatorName"] == "Alcohol-related mortality","IndicatorID"]
inds[inds[, "IndicatorName"] == "Alcohol-specific mortality","IndicatorID"]
pull(inds[inds[, "IndicatorName"] == "Alcohol-related mortality",], IndicatorID)
related_id  <- pull(inds[inds[, "IndicatorName"] == "Alcohol-related mortality",], IndicatorID)
specific_id <- pull(inds[inds[, "IndicatorName"] == "Alcohol-specific mortality",], IndicatorID)
indicator_areatypes(related_id)
indicator_areatypes(specific_id)
area_types(AreaTypeID = 6)
fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_related_deaths <- fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_specific_deaths <- fingertips_data(IndicatorID = specific_id, AreaTypeID = 6)
alc_related_deaths |>
select(IndicatorName, Sex, Age, Count, Denominator)
alc_related_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_specific_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_related_deaths <-
alc_related_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_specific_deaths <-
alc_specific_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
max(alc_specific_deaths$Timeperiod)
max(alc_related_deaths$Timeperiod)
alc_specific_deaths <-
alc_specific_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator) |>
filter(Timeperiod == "2022")
alc_related_deaths <-
alc_related_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator) |>
filter(Timeperiod == "2022")
bind_rows(alc_related_deaths, alc_specific_deaths)
bind_rows(alc_related_deaths, alc_specific_deaths) |>
as_tibble()
# Download data from Fingertips API
alc_related_deaths <- fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_specific_deaths <- fingertips_data(IndicatorID = specific_id, AreaTypeID = 6)
alc_related_deaths <-
alc_related_deaths |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator) |>
filter(Timeperiod == "2022", AreaName == "England")
# Download data from Fingertips API
alc_related_deaths <- fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_specific_deaths <- fingertips_data(IndicatorID = specific_id, AreaTypeID = 6)
alc_related_deaths <-
alc_related_deaths |>
filter(Timeperiod == "2022", AreaName == "England")
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_related_deaths <-
alc_related_deaths |>
filter(Timeperiod == "2022", AreaName == "England") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_specific_deaths <-
alc_specific_deaths |>
filter(Timeperiod == "2022", AreaName == "England") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
bind_rows(alc_related_deaths, alc_specific_deaths) |>
as_tibble()
# Download data from Fingertips API
alc_related_deaths <- fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_specific_deaths <- fingertips_data(IndicatorID = specific_id, AreaTypeID = 6)
alc_related_deaths <-
alc_related_deaths |>
filter(Timeperiod == "2022", AreaName == "England", Sex == "Persons") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator, Sex == "Persons")
alc_specific_deaths <-
alc_specific_deaths |>
filter(Timeperiod == "2022", AreaName == "England", Sex == "Persons") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
bind_rows(alc_related_deaths, alc_specific_deaths) |>
as_tibble()
library(fingertipsR)
library(tidyverse)
inds <- fingertipsR::indicators_unique()
inds <- # List of Fingertips indicators
inds |>
filter(IndicatorName %in% c("Alcohol-related mortality", "Alcohol-specific mortality"))
# Target indicator IDs
related_id  <- pull(inds[inds[, "IndicatorName"] == "Alcohol-related mortality",], IndicatorID)
specific_id <- pull(inds[inds[, "IndicatorName"] == "Alcohol-specific mortality",], IndicatorID)
# Download data from Fingertips API
alc_related_deaths <- fingertips_data(IndicatorID = related_id, AreaTypeID = 6)
alc_specific_deaths <- fingertips_data(IndicatorID = specific_id, AreaTypeID = 6)
# Select and filter data
alc_related_deaths <-
alc_related_deaths |>
filter(Timeperiod == "2022", AreaName == "England", Sex == "Persons") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator, Sex == "Persons")
alc_related_deaths <-
alc_related_deaths |>
filter(Timeperiod == "2022", AreaName == "England", Sex == "Persons") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
alc_specific_deaths <-
alc_specific_deaths |>
filter(Timeperiod == "2022", AreaName == "England", Sex == "Persons") |>
select(Timeperiod, IndicatorName, Sex, Age, Count, Denominator)
bind_rows(alc_related_deaths, alc_specific_deaths) |>
as_tibble()
library(fingertipsR)
library(testthat)
library(tidyverse)
library(openxlsx)
library(arrow)
setwd("~/mortality_and_lyl_substance_misuse")
readxl::excel_sheets("data/raw/table1_ Prison all deaths_expanded Cocaine version_V1.xlsx")
file_path <- "data/raw/table1_ Prison all deaths_expanded Cocaine version_V1.xlsx"
read.xlsx(xlsxFile = file_path, sheet = "table1_ Prison all deaths_expan")
prison_all_deaths <- read.xlsx(xlsxFile = file_path, sheet = "table1_ Prison all deaths_expan")
prison_all_deaths <-
read.xlsx(xlsxFile = file_path, sheet = "table1_ Prison all deaths_expan")
colnames(prison_all_deaths)
prison_all_deaths |>
select(contains("Release"))
prison_all_deaths |>
select(contains("Release")) |> head()
prison_all_deaths |>
filter(!is.na(DaysAfterRelease))
prison_all_deaths |> select(in_out_Tx_extended) |> unique()
prison_all_deaths |>
group_by(in_out_Tx_extended) |>
tally()
prison_all_deaths |>
group_by(in_out_Tx_extended, dod_year) |>
tally()
prison_all_deaths |>
group_by(in_out_Tx_extended, dod_year) |>
tally() |>
pivot_wider(names_from = in_out_Tx, values_from = n)
prison_all_deaths |>
group_by(in_out_Tx_extended, dod_year) |>
tally() |>
pivot_wider(names_from = in_out_Tx_extended, values_from = n)
prison_all_deaths |>
group_by(in_out_Tx_extended, dod_year) |>
tally() |>
pivot_wider(names_from = in_out_Tx_extended, values_from = n, values_fill = 0)
prison_all_deaths |>
group_by(in_out_Tx_extended, dod_year) |>
tally() |>
pivot_wider(names_from = in_out_Tx_extended, values_from = n, values_fill = 0) |>
filter(dod_year > 2012)
